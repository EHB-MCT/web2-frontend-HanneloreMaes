(()=>{"use strict";const e="8532eda8a091632f5428caff44d04e73";let t;function n(e){if(null!=e){let n=e.results[0].locations[0].displayLatLng.lat,i=e.results[0].locations[0].displayLatLng.lng;console.log("Lat, Long",n,i),S(document).ready((function(){t=S.virtualsky({id:"starmapper",clock:!1,projection:"stereo",latitude:n,longitude:i,ground:!0,gradient:!0,constellations:!0,constellationlabels:!0,showplanets:!0,showplanetslabels:!0,showstars:!0,showstarlabels:!0,gridlines_az:!0,live:!0,showposition:!1,showdate:!1})}))}else null==e&&S(document).ready((function(){t=S.virtualsky({id:"starmapper",clock:!1,projection:"stereo",latitude:50.85045,longitude:4.34878,ground:!0,gradient:!0,constellations:!0,constellationlabels:!0,showplanets:!0,showplanetslabels:!0,showstars:!0,showstarlabels:!0,gridlines_az:!0,live:!0,showposition:!1,showdate:!1})}))}function i(t){fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities/${t}/nearbyCities?radius=100&types=CITY`,{method:"GET",headers:{"x-rapidapi-host":"wft-geo-db.p.rapidapi.com","x-rapidapi-key":"29e306b66bmsh45041b043cda44dp1ca8e9jsn1f25d8e9926c"}}).then((e=>e.json())).then((t=>{console.log("Data nearby place",t.data),t.data.forEach((t=>{console.log(t);let n=t.latitude,i=t.longitude;console.log("testen",n,i),fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${n}&lon=${i}&appid=${e}&units=metric`).then((e=>e.json())).then((e=>{console.log("Weather data",e);let t=e.current.dt,n=new Date(1e3*t).getHours()+":000";"Clear"==e.current.weather[0].main?document.getElementById("placeToSeeStars").innerHTML=`\n                        <div id="weatherNearestPlace">\n                            <h1 id="nearestPlace">Nearest place to see stars:</h1>\n                            <div id="ContainerAllInfoNearest">\n                                <div id="locatieTimeNearest">\n                                    <h2 id="locationNearbyCity">${inputPlaces}</h2>\n                                    <p id="clockNearest">${n}</p>\n                                </div>\n                                <div id="columnTextNearest">\n                                    <p id="temperature">${e.current.temp}°C</pv>\n                                    <div id="conditionWeatherNearest">\n                                        <img class="iconWeatherNearest" src="http://openweathermap.org/img/wn/${e.current.weather[0].icon}.png" alt="icon-weather-condition">\n                                        <p id="weatherConditionNameNearest">${e.current.weather[0].description}</p>\n                                    </div>\n                                    <div class="arrow"></div>\n                                </div>\n                            </div>\n                        </div>`:"Clear"!=e.current.weather[0].main&&(document.getElementById("placeToSeeStars").innerHTML='\n                        <div id="weatherNoNearestPlace">\n                            <h2 id="noNearestPlace">There is no nearest place with clear sky at this moment</h1>')}))}))}))}window.onload=n(),document.getElementById("searchform").addEventListener("submit",(t=>{t.preventDefault();let a=document.getElementById("inputPlace").value;!function(t){fetch(`http://www.mapquestapi.com/geocoding/v1/address?key=y9jdsRhSBmSiVS7TFBcWCAsH6r9Xg90c&location=${t}`).then((e=>e.json())).then((a=>{!function(e){fetch(`https://www.wikidata.org/w/api.php?action=wbgetentities&sites=enwiki&titles=${e}&format=json`).then((e=>e.json())).then((e=>{console.log("Wiki Id Nummer",e),console.log("Get entitie",Object.keys(e.entities)),i(Object.keys(e.entities)[0])}))}(t),n(a),function(t,n){let i=t.results[0].locations[0].displayLatLng.lat,a=t.results[0].locations[0].displayLatLng.lng;fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${i}&lon=${a}&appid=${e}&units=metric`).then((e=>e.json())).then((e=>{console.log("Weather data",e);let t=e.hourly;document.getElementById("weatherLeftMenu").innerHTML=`\n                <div id="weatherLeftMenuBlock">\n                    <div id="containerInfoLeft">\n                    ${setInterval((()=>{let e=new Date,t=e.getHours(),n=e.getMinutes();document.getElementById("current-time").innerHTML=t+":"+n}),1e3)}\n                        <p id="current-time"></p>\n                        &nbsp; \n                        <h1 id="current-inputplace">${n}</h1>\n                    </div>\n                    <div id="columnText">\n                        <div id="conditionWeatherLeft">\n                            <p id="temperatureLeft">${e.current.temp}°C</pv>\n                            &nbsp; &nbsp; &nbsp; \n                            <div id="containerWeatherConditionLeft">\n                                <img class="iconWeatherLeft" src="http://openweathermap.org/img/wn/${e.current.weather[0].icon}.png" alt="icon-weather-condition">\n                                <p id="weatherConditionNameLeft">${e.current.weather[0].description}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>`,document.getElementById("weatherRightMenu").innerHTML="",t.forEach((e=>{let t=e.dt,n=new Date(1e3*t),i=n.getHours()+1+":"+("0"+n.getMinutes()).substr(-2),a=document.getElementById("weatherRightMenu"),o=`\n                <div id="weatherRightMenuBlock">\n                    <img class="iconWeather" src="http://openweathermap.org/img/wn/${e.weather[0].icon}.png" alt="icon-weather-condition">\n                    <div id="columnText">\n                        <p id="clock">${i}</p>\n                        <div id="conditionWeather">\n                            <p id="temperature">${e.temp}°C</pv>\n                            &nbsp; &nbsp;\n                            <p id="weatherConditionName">${e.weather[0].description}</p>\n                        </div>\n                    </div>\n                </div>`;a.insertAdjacentHTML("beforeend",o)}))}))}(a,t)}))}(a),function(e){console.log("Plaats",e);let t=new Headers;t.append("Content-Type","application/json"),fetch("https://sterrenkijker.herokuapp.com/saveInputPlace",{method:"POST",headers:t,body:JSON.stringify({input:e})}).then((e=>e.json())).then((t=>{console.log("Succes Post",t),getInput(e)}))}(a)}))})(),window.onload=async function e(){const t=await fetch("https://sterrenkijker.herokuapp.com/inputPlace"),n=await t.json();console.log("Succes Get",n),n.forEach((e=>{const t=document.getElementById("savedContainer"),n=`\n            <div id="${e._id}" class="savedPlaceContainer">\n                <h2 id="savedInput">${e.input}</h2>\n                <div id="editDelete">\n                    <button class="containerEdit"><i class="fas fa-edit"></i></button>\n                    <button class="containerDelete"><i class="fas fa-trash-alt"></i></button>\n                </div>\n            </div>    \n            `;t.insertAdjacentHTML("beforeend",n)})),document.getElementById("savedContainer").addEventListener("click",(t=>{if(t.target.closest(".savedPlaceContainer").id){if(-1!==t.target.className.indexOf("edit")){console.log("Edit");let t={input:document.getElementById("editCity").value},n=new Headers;n.append("Content-Type","application/json"),fetch("https://sterrenkijker.herokuapp.com/updateInput/:input",{method:"PUT",headers:n,body:JSON.stringify(t)}).then((e=>e.json())).then((t=>{console.log("Succes Update",t),setTimeout(document.getElementById("editContainer").style.display="none",2e3),setTimeout(e(),1e3)}))}-1!==t.target.className.indexOf("trash")&&console.log("trash")}}))}();